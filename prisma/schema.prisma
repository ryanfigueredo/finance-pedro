// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CLIENTE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  duplicatas Duplicata[]

  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Cliente {
  id              String  @id @default(uuid())
  nome            String
  cpfCnpj         String  @unique
  email           String?
  telefone        String?
  endereco        String?
  razaoSocial     String?

  taxaAntecipacao Float  @default(0.0) // taxa1
  taxaBancaria    Float  @default(0.0) // taxa2 (valor fixo)
  taxaServico     Float  @default(0.0) // taxa3 (percentual de comiss√£o)
  taxaAdicional   Float? @default(0.0) // taxa extra fixa
  taxaNegativacao Float? // se negativado

  duplicatas Duplicata[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  Bordero Bordero[]
}


model Duplicata {
  id               String          @id @default(uuid())
  numero           String          @unique
  valor            Float
  valorComDesconto Float?
  vencimento       DateTime
  emissao          DateTime        @default(now())
  status           StatusDuplicata @default(PENDENTE)
  observacoes      String?
  resultado        Float? 

  userId      String
  clienteId   String
  borderoId   String?  

  user        User      @relation(fields: [userId], references: [id])
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  bordero     Bordero?  @relation(fields: [borderoId], references: [id])
  arquivos    Arquivo[]
  antecipacoes Antecipacao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Arquivo {
  id          String    @id @default(uuid())
  url         String
  tipo        String // PDF, XML
  duplicataId String
  duplicata   Duplicata @relation(fields: [duplicataId], references: [id])
}

model ConsultaCredito {
  id            String   @id @default(uuid())
  cpfCnpj       String
  score         Int
  aprovado      Boolean
  valorSimulado Float
  createdAt     DateTime @default(now())
}

model Antecipacao {
  id             String   @id @default(uuid())
  duplicataId    String
  taxaAplicada   Float
  valorFinal     Float
  dataSolicitada DateTime @default(now())

  duplicata Duplicata @relation(fields: [duplicataId], references: [id])
}

enum Role {
  CLIENTE
  ADMIN
  MASTER
}

enum StatusDuplicata {
  PENDENTE
  PAGA
  ANTECIPADA
  CANCELADA
}

model Bordero {
  id           String     @id @default(uuid())
  clienteId    String
  cliente      Cliente    @relation(fields: [clienteId], references: [id])
  dataGeracao  DateTime   @default(now())
  valorBruto   Float
  totalTaxas   Float
  valorLiquido Float

  duplicatas   Duplicata[] 
}

